<launch>
  <arg name="mav_name" default="firefly"/>
  <arg name="world_name" default="basic"/>
  <arg name="enable_logging" default="false" />
  <arg name="enable_ground_truth" default="true" />
  <arg name="log_file" default="$(arg mav_name)" />
  <arg name="gdb" default="false"/>
  <arg name="gdb_prefix" value="" unless="$(arg gdb)"/>
  <arg name="gdb_prefix" value="x-terminal-emulator -e gdb -ex run --args" if="$(arg gdb)"/>
  <arg name="no_world" default="false" />
  <arg name="no_spawn" default="false" />
  <arg name="robot_name" default="$(arg mav_name)" />
  <arg name="x" default="0.0" />
  <arg name="y" default="0.0" />
  <arg name="z" default="0.1" />

  <env name="GAZEBO_MODEL_PATH" value="$(find rotors_gazebo)/models"/>
  <include unless="$(arg no_world)" file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find rotors_gazebo)/worlds/$(arg world_name).world" />
    <!-- <arg name="debug" value="true"/> -->
    <arg name="paused" value="true"/>
    <!-- <arg name="gui" value="false"/> -->
  </include>
  <node name="joy_node" pkg="joy" type="joy_node" />

  <group unless="$(arg no_spawn)" ns="$(arg robot_name)">
    <!--<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg log_file)"/>
    </include>-->

    <param name="robot_description" command="
      $(find xacro)/xacro.py '$(find rotors_description)/urdf/multi_mav_generic_odometry_sensor.gazebo'
      enable_logging:=$(arg enable_logging)
      enable_ground_truth:=$(arg enable_ground_truth)
      enable_mavlink_interface:=false
      log_file:=$(arg log_file)
      mav_name:=$(arg robot_name)
      base_name:=$(arg mav_name)"
    />
    <param name="tf_prefix" type="string" value="$(optenv ROS_NAMESPACE)" />

    <!-- send the robot XML to param server -->
    <node name="lee_position_controller_node" pkg="rotors_control" type="lee_position_controller_node" output="screen" launch-prefix="$(arg gdb_prefix)">
      <rosparam command="load" file="$(find rotors_gazebo)/resource/lee_controller_$(arg mav_name).yaml" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml" />
      <remap from="odometry" to="odometry_sensor1/odometry" />
    </node>
    <node name="waypoint_publisher_joy" pkg="rotors_gazebo" type="waypoint_publisher_joy" output="screen" launch-prefix="$(arg gdb_prefix)">
      <param name="mav_name" value="$(arg mav_name)" />
      <param name="model_name" value="$(arg robot_name)" />
      <param name="spawn_x" value="$(arg x)" />
      <param name="spawn_y" value="$(arg y)" />
      <param name="spawn_z" value="$(arg z)" />
      <remap from="odometry" to="odometry_sensor1/odometry" />
      <remap from="joy" to="/joy" />
    </node>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
    <node name="quaternion_to_rpy" pkg="rotors_gazebo" type="quaternion_to_rpy" output="screen">
      <remap from="pose" to="odometry_sensor1/pose" />
    </node>
    <node name="position_plot" pkg="rqt_plot" type="rqt_plot" args="--clear-config /$(arg robot_name)/odometry_sensor1/pose_with_covariance/pose/pose/position /$(arg robot_name)/command/trajectory/points[0]/transforms[0]/translation" output="screen" />
    <node name="orientation_plot" pkg="rqt_plot" type="rqt_plot" args="--clear-config /$(arg robot_name)/orientation_rpy" output="screen" />
  </group>
  
</launch>
